// Map , Set , weakMap , weakSet
// ==========
// template

// const obj = {
//     name:'s',
//     age:'sd',
//     job:'dsf'
// }
// const entries =[
//     ['name','valentine']
// ]
//
// const map = new Map(entries)


// console.log(newMap.set('nsnsn','nsnsnsn'))

//Map

// Как написать обьект с ключом , у которого будет обьект
// {{} => 'foo',NaN => 'bar'}


// как из карты Сделать массив
// const array = Array.from(map)
// const array = [...map]

// как из карты Сделать обьект
// const mapObj = Object.fromEntries(map.entries())

// Set

// убрать дубликаты из массива [1,1,1,1,2,2,2,3,4,5,6]
// function remove (arrr) {
//     return [...new Set(arrr)] || return Array.from(new Set(arrr))
// }
// const ar = [1,1,1,1,2,2,2,3,4,5,6]
// console.log(remove(ar))

// что возвращает метод .set карты
// новую карту
// const newMap = new Map()
// const map = newMap.set('dfdf','dfdf').set('sdsdsd','sdsdsdsd')
// console.log(map)

// В чём отличие weekMap от Map
// WeakSet – особый вид Set, не препятствующий сборщику мусора удалять свои элементы.
// То же самое – WeakMap для Map. То есть, если некий объект присутствует только в WeakSet/WeakMap
// – он удаляется из памяти. Это нужно для тех ситуаций, когда основное место для хранения и использования объектов находится
// где-то в другом месте кода, а здесь мы хотим хранить для них «вспомогательные» данные, существующие лишь пока жив объект
// . Например, у нас есть элементы на странице или, к примеру, пользователи,
// и мы хотим хранить для них вспомогательную информацию, например обработчики событий или просто данные,
// но действительные лишь пока объект, к которому они относятся, существует. Если поместить такие данные в WeakMap,
// а объект сделать ключом, то они будут автоматически удалены из памяти, когда удалится элемент.
